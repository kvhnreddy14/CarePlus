package Entity;


public class Appointment {
    private Patient patient;
    private Doctor doc;
    private TimeSlot timeSlot;

    public Appointment(Doctor doc, Patient patient, TimeSlot timeSlot){
        this.doc =doc;
        this.patient = patient;
        this.timeSlot = timeSlot;
    }

    public Patient getPatient() {
        return patient;
    }

    public void setPatient(Patient patient) {
        this.patient = patient;
    }

    public Doctor getDoc() {
        return doc;
    }

    public void setDoc(Doctor doc) {
        this.doc = doc;
    }

    public TimeSlot getTimeSlot() {
        return timeSlot;
    }

    public void setTimeSlot(TimeSlot timeSlot) {
        this.timeSlot = timeSlot;
    }
}

package Entity;

import java.time.LocalDate;
import java.time.LocalTime;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;

public class Day {
    public static int dayNum;
    private final String dayId;
    private LocalDate date;
    private LocalTime startTime;
    private LocalTime endTime;
    private List<TimeSlot> timeSlotList;
    private int appintmentSizeInMinutes;

    public Day(LocalDate date,LocalTime startTime, LocalTime endTime,int appintmentSizeInMinutes ){
        dayNum++;
        this.dayId = "DAY" + dayNum;
        this.date = date;
        this.timeSlotList = new ArrayList<>();
        this.appintmentSizeInMinutes = appintmentSizeInMinutes;
        while(startTime != endTime){
            timeSlotList.add(new TimeSlot(startTime, startTime.plus(appintmentSizeInMinutes, ChronoUnit.MINUTES), date));
            startTime = startTime.plus(appintmentSizeInMinutes,ChronoUnit.MINUTES);
        }
    }

    public void setTimeSlotforParticularDay(LocalTime startTime, LocalTime endTime,int appintmentSizeInMinutes){
        timeSlotList.clear();
        while(startTime != endTime){
            timeSlotList.add(new TimeSlot(startTime, startTime.plus(appintmentSizeInMinutes, ChronoUnit.MINUTES), date));
            startTime = startTime.plus(appintmentSizeInMinutes,ChronoUnit.MINUTES);
        }
    }

    public List<TimeSlot> getTimeSlotList() {
        return timeSlotList;
    }

    public void setTimeSlotList(List<TimeSlot> timeSlotList) {
        this.timeSlotList = timeSlotList;
    }

    public LocalDate getDate() {
        return date;
    }

    public void setDate(LocalDate date) {
        this.date = date;
    }

    public LocalTime getStartTime() {
        return startTime;
    }

    public void setStartTime(LocalTime startTime) {
        this.startTime = startTime;
    }

    public LocalTime getEndTime() {
        return endTime;
    }

    public void setEndTime(LocalTime endTime) {
        this.endTime = endTime;
    }

    public int getAppintmentSizeInMinutes() {
        return appintmentSizeInMinutes;
    }

    public void setAppintmentSizeInMinutes(int appintmentSizeInMinutes) {
        this.appintmentSizeInMinutes = appintmentSizeInMinutes;
    }
}
package Entity;

import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class Doctor {
    public DateTimeFormatter dtf = DateTimeFormatter.ofPattern("H:m");
    public static int docNum;
    private final String docId;
    private String docName;
    private Specialization docSpecialization;
    private LocalTime availableStartTime = LocalTime.parse("9:00", dtf);
    private LocalTime availableEndTime = LocalTime.parse("6:00", dtf);
    private List<Appointment> docAppointments;
    private List<Day> dayWiseTimeSlots;

    public Doctor(String docName, Specialization docSpecialization, LocalTime availableStartTime, LocalTime availableEndTime) {
        docNum++;
        this.docId = "D" + docNum;
        this.docName = docName;
        this.docSpecialization = docSpecialization;
        this.availableStartTime = availableStartTime;
        this.availableEndTime = availableEndTime;
        this.dayWiseTimeSlots = new ArrayList<>();
        LocalDate today = LocalDate.now();
        for (int i = 0; i < 3; i++) {
            dayWiseTimeSlots.add(new Day(today, availableStartTime, availableEndTime, 30));
            today = today.plusDays(1);
        }
    }

    public void renderTonextKDays(int k){
        LocalDate today = LocalDate.now();
        List<Day> dayWiseTimeSlots1 = new ArrayList<>();
        for(Day day: dayWiseTimeSlots){
            if(today.isAfter(day.getDate()) ){
                continue;
            }
            else{
                dayWiseTimeSlots1.add(day);
            }
        }

        if(dayWiseTimeSlots1.size() != 0){
            today = today.plusDays(1);
        }

        for (int i = 0; i < k; i++) {
            if(i < dayWiseTimeSlots1.size()){
                continue;
            }
            dayWiseTimeSlots.add(new Day(today, availableStartTime, availableEndTime, 30));
            today = today.plusDays(i);
        }
    }

    public int getNumberOfAvailableSlots(){
        int count=0;
        for(Day day: dayWiseTimeSlots){
            for(TimeSlot timeSlot : day.getTimeSlotList()){
                if(timeSlot.getAppointment() == null)
                count++;
            }
        }
        return count;
    }

    public static int getDocNum() {
        return docNum;
    }

    public static void setDocNum(int docNum) {
        Doctor.docNum = docNum;
    }

    public String getDocId() {
        return docId;
    }

    public String getDocName() {
        return docName;
    }

    public void setDocName(String docName) {
        this.docName = docName;
    }

    public Specialization getDocSpecialization() {
        return docSpecialization;
    }

    public void setDocSpecialization(Specialization docSpecialization) {
        this.docSpecialization = docSpecialization;
    }

    public LocalTime getAvailableStartTime() {
        return availableStartTime;
    }

    public void setAvailableStartTime(LocalTime availableStartTime) {
        this.availableStartTime = availableStartTime;
    }

    public LocalTime getAvailableEndTime() {
        return availableEndTime;
    }

    public void setAvailableEndTime(LocalTime availableEndTime) {
        this.availableEndTime = availableEndTime;
    }

    public List<Appointment> getDocAppointments() {
        return docAppointments;
    }

    public void setDocAppointments(List<Appointment> docAppointments) {
        this.docAppointments = docAppointments;
    }

    public List<Day> getDayWiseTimeSlots() {
        return dayWiseTimeSlots;
    }

    public void setDayWiseTimeSlots(List<Day> dayWiseTimeSlots) {
        this.dayWiseTimeSlots = dayWiseTimeSlots;
    }
}

package Entity;

import java.util.ArrayList;
import java.util.List;

public class Patient {
    public static int patientNum;
    private final String patientId;
    private String patientName;
    private int patientAge;
    private String patientPhoneNum;
    private Specialization pateintProblemSpecialization;
    private List<Appointment> patientAppointments;

    public Patient(String patientName,int age, String patientPhoneNum, Specialization pateintProblemSpecialization){
        patientNum++;
        this.patientId = "P" + patientNum;
        this.patientName = patientName;
        this.patientAge = patientAge;
        this.patientPhoneNum = patientPhoneNum;
        this.pateintProblemSpecialization = pateintProblemSpecialization;
        this.patientAppointments = new ArrayList<>();
    }

    public static int getPatientNum() {
        return patientNum;
    }

    public int getPatientAge() {
        return patientAge;
    }

    public void setPatientAge(int patientAge) {
        this.patientAge = patientAge;
    }

    public String getPatientPhoneNum() {
        return patientPhoneNum;
    }

    public void setPatientPhoneNum(String patientPhoneNum) {
        this.patientPhoneNum = patientPhoneNum;
    }

    public static void setPatientNum(int patientNum) {
        Patient.patientNum = patientNum;
    }

    public String getPatientId() {
        return patientId;
    }

    public String getPatientName() {
        return patientName;
    }

    public void setPatientName(String patientName) {
        this.patientName = patientName;
    }

    public Specialization getPateintProblemSpecialization() {
        return pateintProblemSpecialization;
    }

    public void setPateintProblemSpecialization(Specialization pateintProblemSpecialization) {
        this.pateintProblemSpecialization = pateintProblemSpecialization;
    }

    public void addAppointment(Appointment appointment){
        patientAppointments.add(appointment);
    }

    public void deleteAppointment(Appointment appointment){
        patientAppointments.remove(appointment);
    }

    public List<Appointment> getPatientAppointments() {
        return patientAppointments;
    }

    public void setPatientAppointments(List<Appointment> patientAppointments) {
        this.patientAppointments = patientAppointments;
    }
}
package Entity;

public class Receptionist {
    public static int receptionistNum;
    private final String receptionistId;
    private String receptionistName;

    public Receptionist(String receptionistName) {
        receptionistNum++;
        this.receptionistId = "R" + receptionistNum;
        this.receptionistName = receptionistName;
    }

    public static int getReceptionistNum() {
        return receptionistNum;
    }

    public static void setReceptionistNum(int receptionistNum) {
        Receptionist.receptionistNum = receptionistNum;
    }

    public String getReceptionistId() {
        return receptionistId;
    }

    public String getReceptionistName() {
        return receptionistName;
    }

    public void setReceptionistName(String receptionistName) {
        this.receptionistName = receptionistName;
    }
}
package Entity;

public enum Specialization {
    CARDIOLOGY, OPTHOMOLOGY, DERMITOLOGY
}
package Entity;

import java.time.LocalDate;
import java.time.LocalTime;

public class TimeSlot {
    public static int tsNum;
    private final String tsId;
    private LocalTime startTime;
    private LocalTime endTime;
    private LocalDate timeSlotDate;
    private Appointment appointment = null;

    public TimeSlot(LocalTime startTime, LocalTime endTime,LocalDate timeSlotDate){
        tsNum++;
        this.tsId = "TS" + tsNum;
        this.startTime = startTime;
        this.endTime = endTime;
        this.timeSlotDate = timeSlotDate;
    }

//    public TimeSlot(LocalTime startTime, LocalTime endTime, Appointment appointment){
//        this.startTime = startTime;
//        this.endTime = endTime;
//        this.appointment = appointment;
//        tsId = "";
//    }

    public LocalDate getTimeSlotDate() {
        return timeSlotDate;
    }

    public void setTimeSlotDate(LocalDate timeSlotDate) {
        this.timeSlotDate = timeSlotDate;
    }

    public LocalTime getStartTime() {
        return startTime;
    }

    public void setStartTime(LocalTime startTime) {
        this.startTime = startTime;
    }

    public LocalTime getEndTime() {
        return endTime;
    }

    public void setEndTime(LocalTime endTime) {
        this.endTime = endTime;
    }

    public Appointment getAppointment() {
        return appointment;
    }

    public void setAppointment(Appointment appointment) {
        this.appointment = appointment;
    }
}

package Service;

import Entity.*;

import java.time.LocalDate;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.List;

import static java.util.stream.Collectors.toList;

public class DocService {
    private List<Doctor> doctorList = new ArrayList<>();

    private static DocService instance;

    private DocService(){

    }

    public static DocService getInstance(){
        if(instance == null){
            synchronized(DocService.class){
                if(instance==null){
                    instance = new DocService();
                }
            }
        }
        return instance;
    }

    public void addDoctor(String docName, Specialization docSpecialization, LocalTime availableStartTime, LocalTime availableEndTime){
        doctorList.add(new Doctor(docName, docSpecialization, availableStartTime, availableEndTime));
    }

    public void modifyDocAvailability(Doctor doc, LocalDate date, LocalTime availableStartTime, LocalTime availableEndTime, int appintmentSizeInMinutes){
        for(Day day: doc.getDayWiseTimeSlots()){
            if(day.getDate().equals(date)){
                day.setTimeSlotforParticularDay(availableStartTime, availableEndTime, appintmentSizeInMinutes);
            }

        }
    }

    public void deleteDoc(Doctor doc){
        doctorList.remove(doc);
    }

    public List<Doctor> getAllDoctors(){
        return doctorList;
    }



    public List<Doctor> getDoctorsBySpecialization(Specialization specialization){
        List<Doctor> resultList = doctorList.stream()
                .filter(doctor -> {
                            return doctor.getDocSpecialization().equals(specialization);
                        })
                .toList();

        return resultList;
    }

    public List<Doctor> getDoctorsByName(String name){
        List<Doctor> resultList = doctorList.stream()
                .filter(doctor -> {
                    return doctor.getDocName().equalsIgnoreCase(name);
                })
                .toList();
        return resultList;
    }

    public List<Doctor> getDoctorsBySpecializationAndTime(Specialization specialization, LocalDate date, LocalTime time){
        List<Doctor> resultList = doctorList.stream()
                .filter(doctor -> {
                    for(Day day: doctor.getDayWiseTimeSlots()){
                        if(day.getDate().equals(date)) {
                            for (TimeSlot timeSlot : day.getTimeSlotList()) {
                                if (timeSlot.getStartTime().equals(time) && timeSlot.getAppointment() == null) {
                                    return true;
                                }
                                ;
                            }
                        }
                    }
                    return false;
                })
                .toList();
        return resultList;
    }

    public List<Appointment> getDoctorBookedAppointments(Doctor doctor){
        List<Appointment> resultList = new ArrayList<>();
        for(Day day: doctor.getDayWiseTimeSlots()){
            for(TimeSlot timeSlot : day.getTimeSlotList()){
                if(timeSlot.getAppointment() != null){
                    resultList.add(timeSlot.getAppointment());
                }
                else{
                    continue;
                }
            }
        }
        return resultList;
    }

    public List<TimeSlot> getDoctorAvailableSlots(Doctor doctor){
        List<TimeSlot> resultList = new ArrayList<>();
        for(Day day: doctor.getDayWiseTimeSlots()){
            for(TimeSlot timeSlot : day.getTimeSlotList()){
                if(timeSlot.getAppointment() != null){
                    continue;
                }
                else{
                    resultList.add(timeSlot);
                }
            }
        }
        return resultList;
    }

    public Appointment bookAppointmentForDoc(Doctor doc, Patient patient,LocalDate date, LocalTime appointmentTime){
        for(Day day : doc.getDayWiseTimeSlots()){
            if(day.getDate().equals(date)){
                for(TimeSlot timeSlot: day.getTimeSlotList()){
                    if(timeSlot.getStartTime().equals(appointmentTime)){
                        Appointment appointment1 = new Appointment(doc, patient, timeSlot);
                        timeSlot.setAppointment(appointment1);
                        doc.getDocAppointments().add(appointment1);
                        return appointment1;
                    }
                }
            }
        }
        return null;
    }

    public boolean cancelAppointment(Doctor doc, LocalDate date, LocalTime appointmentTime){
        for(Day day : doc.getDayWiseTimeSlots()){
            if(day.getDate().equals(date)){
                for(TimeSlot timeSlot: day.getTimeSlotList()){
                    if(timeSlot.getStartTime().equals(appointmentTime)){
                        timeSlot.setAppointment(null);
                        return true;
                    }
                }
            }
        }
        return false;
    }

    public Appointment rescheduleTocustomSlotForDoc(Doctor doc, Patient patient,LocalDate previousDate, LocalTime previousAppointmentTime, LocalDate newDate,  LocalTime newAppointmentTime){
        if(cancelAppointment(doc, previousDate, previousAppointmentTime)){
            return bookAppointmentForDoc(doc, patient, newDate, newAppointmentTime);
        }
        return null;
    }

    public Appointment rescheduleToNextAvailableAppointmentForDoc(Doctor doc, Patient patient,LocalDate date, LocalTime appointmentTime){
        Appointment appointment1 = null;
        outer : for(Day day : doc.getDayWiseTimeSlots()){
            if(day.getDate().equals(date)){
                inner : for(TimeSlot timeSlot: day.getTimeSlotList()){
                    boolean after = false;
                    if(timeSlot.getStartTime().equals(appointmentTime)){
                        after = true;
                        if(timeSlot.getAppointment() == null){
                            System.out.println("no appointment is booked here. can postpone");
                            break outer;
                        }
                        else{
                            appointment1 = timeSlot.getAppointment();
                            timeSlot.setAppointment(null);
                        }
                    }
                    if(after){
                        if(timeSlot.getAppointment() == null){
                            appointment1.setTimeSlot(timeSlot);
                            timeSlot.setAppointment(appointment1);
                            return appointment1;
                        }
                    }
                }
            }
        }
        return null;
    }
}

package Service;

import Entity.Appointment;
import Entity.Patient;
import Entity.Specialization;

import java.util.ArrayList;
import java.util.List;

public class PatientService {
    private List<Patient> patientList = new ArrayList<>();

    private static PatientService instance;

    private PatientService(){

    }

    public static PatientService getInstance(){
        if(instance == null){
            synchronized(PatientService.class){
                if(instance==null){
                    instance = new PatientService();
                }
            }
        }
        return instance;
    }

    public Patient addPatient(String patientName,int age, String patientPhoneNum, Specialization pateintProblemSpecialization){
        Patient patient = new Patient(patientName, age, patientPhoneNum, pateintProblemSpecialization);
        patientList.add(patient);
        return patient;
    }

    public List<Patient> getPatientsList(){
        return patientList;
    }


    public void addAppointmentToPatient(Patient patient, Appointment appointment){
        patient.addAppointment(appointment);
    }

    public void deleteAppointmentFromPatient(Patient patient, Appointment appointment){
        patient.deleteAppointment(appointment);
    }

    // need to be added when booking is completed by doc service
    public List<Appointment> getPatientAppointments(Patient patient){
        return patient.getPatientAppointments();
    }

    public List<Patient> getPatientByName(String name){
        return patientList.stream()
                .filter(patient -> patient.getPatientName().equalsIgnoreCase(name))
                .toList();
    }

    public List<Patient> getPatientByNameAndAge(String name, int age){
        return patientList.stream()
                .filter(patient -> patient.getPatientName().equalsIgnoreCase(name) && patient.getPatientAge() == age)
                .toList();
    }
}
package Service;

import Entity.Receptionist;

import java.util.ArrayList;
import java.util.List;

public class ReceptionService {
    private List<Receptionist> receptionistList = new ArrayList<>();

    private static ReceptionService instance;

    private ReceptionService(){

    }

    public static ReceptionService getInstance(){
        if(instance == null){
            synchronized(ReceptionService.class){
                if(instance==null){
                    instance = new ReceptionService();
                }
            }
        }
        return instance;
    }

    public List<Receptionist> getReceptionistList() {
        return receptionistList;
    }

    public void addReceptionist(String name){
        receptionistList.add(new Receptionist(name));
    }

    public void deleteReceptionist(Receptionist receptionist){
        receptionistList.remove(receptionist);
    }
}
package Repository;

public class DoctorRepository {

}
package Service;

import Entity.Specialization;

import java.sql.Connection;
import java.sql.Driver;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.time.LocalTime;

public class RepositoryService {
    private final String url = "jdbc:mysql://localhost:3306/playground";
    private final String username = "root";
    private final String password = "postgres";

    private static RepositoryService instance;

    private RepositoryService(){

    }

    public static RepositoryService getInstance(){
        if(instance == null){
            synchronized(RepositoryService.class){
                if(instance==null){
                    instance = new RepositoryService();
                }
            }
        }
        return instance;
    }

    public void addDoctor(String docName, Specialization docSpecialization, LocalTime availableStartTime, LocalTime availableEndTime){
        try (Connection conn = DriverManager.getConnection(url, username, password);){

        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }
    public void updateDoctor(String docName, Specialization docSpecialization, LocalTime availableStartTime, LocalTime availableEndTime){
        try (Connection conn = DriverManager.getConnection(url, username, password);){

        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public void deleteDoctor(String docName, Specialization docSpecialization, LocalTime availableStartTime, LocalTime availableEndTime){
        try (Connection conn = DriverManager.getConnection(url, username, password);){

        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }


}
